kafka的四个组件：
	1、zk：主题topic、broker和consumer在zk上注册管理
	2、kafka：broker server
	3、procedure：生产者
	4、consumer：消费者

	Broker
	Kafka集群包含一个或多个服务器，这种服务器被称为broker
	Topic
	每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一
	个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）
	Partition
	Parition是物理上的概念，每个Topic包含一个或多个Partition.
	Producer
	负责发布消息到Kafka broker
	Consumer
	消息消费者，向Kafka broker读取消息的客户端。
	Consumer Group
	每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。

	消息是发送到broker服务器上的，同时要存到磁盘。目前配置的是单节点多broker，这种属于伪分布式。

broker在zk的结构：
/broker
  /ids
    /0
    /1
    /2
  /topics
    /test
      /partitions
        /0
          /stat
        /1
        /2
        /3

/consumers --消费者
  /console-consumer-31213 --其中一个消费者客户端

broker并不记录消息的消费情况。
kafka核心：
	1、消息缓存和文件系统存储，数据被立刻写入操作系统的内核页。
	2、消息消费之后可以长期保留消息，消费者可以重复消费消息。
	3、对消息集合使用分组消息处理，有着更少的网络负载
	4、kafka将消费的元数据保存在consumer端，大多数jms系统是保存在broker端。这会导致：松散消息，导致失败；同一个消息的多次分发。
	consumer在zk中存放状态，但是kafka也允许在其他系统中存放状态。
	5、生产者和消费者以push（producer）-pull（consumer）模式进行工作。
	6、kafka没有主从模式，所有的broker都是平等的，在任何时候都可以增删broker。而且broker的元数据在zk中存储，在producer和
	consumer之间共享。
	7、生产者发送消息可以是同步或者是异步。

kafka分区partitions：
	在broker端完成分区，producer决定了消息要如何分区，broker以消息到达的先后顺序存放消息。每个topic可以配置分区数。

kafka副本：
	保证broker在故障之后仍然能够被发布、消费。生产者和消费者都是副本可关注的。
	主题的每个分区有n个副本，可以应对n-1个故障，有一个副本是leader，其余是followers。
	每个副本在本地存放的消息和offset，周期性的同步到磁盘。
	推选新leader过程就是followers在zk中注册自己的过程，最先注册成功的follower成为leader。

	kafka支持如下复制模式：
	1、同步：producer从zk中找leader，followers从leader pull消息，写入各自的logs，然后follower向leader发送ack，如果leader
	收到所有的ack，向producer发送ack。在consumer侧，所有消息的读取都来源于leader。
	2、异步：leader只要将消息写入本地log，就向客户端发送ack，不用等到所有的followers进行ack确认。如果broker故障，则不能保证消息
	的分发。